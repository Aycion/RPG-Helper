import json, requests, time, urllib, sys, re
from dbhelper import DBHelper

db = DBHelper()
TOKEN = "447451812:AAHk9KMBZdPJqguIZbi_Ooh97p0I3xXIES8"
URL = "https://api.telegram.org/bot{}/".format(TOKEN)
niceCount = 0


class RPGBot(object):

    def __init__(self):
        self.reglist = {}
        self.reglist["addcharex"] = re.compile("^ */addchar")
        self.reglist["addcharform"] = re.compile("^ */addchar +(\w+) +(\w+) *$")
        self.reglist['helloform'] = re.compile('^ *[hH]ello[, \.]? ?[rR]over')


    ''' Sends a get request to the given url, returns the Response object generated by the get request and decoded from utf8
    '''
    def get_url(self, url):
        response = requests.get(url)
        content = response.content.decode("utf8")
        return content

    ''' Parses the JSON content from the request into a JSON object '''
    def get_json_from_url(self, url):
        content = self.get_url(url)
        js = json.loads(content)
        return js


    ''' Sends a request to the URL to get any new messages.
        Offset is the numerical identifier of the first and earliest update that will be returned. A message is considered comfirmed as soon as getUpdates is called with an offset higher than its update_id.
        By default, update is unspecified. In this case, get_updates will return all unconfirmed updates, starting with the earliest.
    '''
    def get_updates(self, offset=None):
        url = URL + "getUpdates?timeout=100"
        if offset:
            url += "&offset={}".format(offset)
        js = self.get_json_from_url(url)
        return js

    ''' Gets the update ID of the most recent update, to be used to confirm all previous messages. '''
    def get_last_update_id(self, updates):
        update_ids = []
        for update in updates["result"]:
            update_ids.append(int(update["update_id"]))
        return max(update_ids)


    ''' Sends a the message given by the text param to the chat corresponding to chat_id
    '''
    def send_message(self, text, chat_id):
        text = urllib.parse.quote_plus(text)
        url = URL + "sendMessage?text={}&chat_id={}".format(text, chat_id)
        self.get_url(url)

    ''' Calls process text and sends the result to the chat the message came from.
        Updates is the JSON object representing the message that is being processed.
    '''
    def echo_all(self, updates):
        for update in updates["result"]:
            try:
                text = self.process_text(update)
                chat = update["message"]["chat"]["id"]
                self.send_message(text, chat)
            except Exception as e:
                print("Exception: ",e)

    ''' This method takes the message as a string, processes it, and returns the indicated response as a string. To process, it reads the contents of the string and matches it against the set of keystrings. If there's a match, it performs the indicated operation and returns the resultant string.
                    #### In progress ####
    '''
    def process_text(self, update):
        message = update["message"]["text"].lower()
        if self.reglist['helloform'].match(message):
            return "Hello, I am a bot in testing."
        elif self.reglist["addcharex"].match(message): #Add player case
            if (match == reglist["addcharform"].match(message)):
                db.add_char(match.group(1), match.group(2))
                return "Successfully added {} to game.".format(match.group(1))
            return "Error: incorrect format.\nUsage: \"/addchar <character> <player>\""
        elif message.startswith("/deletechar"): #Delete player case
            parsedMessage = message.split(" ")
            if len(parsedMessage) == 2:
                if db.delete_char(parsedMessage[1]):
                    return "Deleted {} from the game.".format(parsedMessage[1])
                else:
                    return "Database Error: Could not delete character."
            return "Error: incorrect format. \nUsage: \"/deletechar <character> <player>\""
        elif message.lower() == "Nice":
            global niceCount
            niceCount += 1
            if niceCount - 1 < 5:
                return message
            else:
                return "Noice"
        else:
            return message


def main():

    last_update_id = None
    bot = RPGBot()
    while True:
        db.setup()
        updates = bot.get_updates(last_update_id)
        if len(updates["result"]) > 0:
            last_update_id = bot.get_last_update_id(updates) + 1
            bot.echo_all(updates)
        time.sleep(0.5)


if __name__ == '__main__':
    main()
